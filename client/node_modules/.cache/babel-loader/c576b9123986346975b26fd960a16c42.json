{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api'; // Action Creators - function that return an action. \n// Action is just a type and payload\n// with redux thunk, allows to add async(dispatch). Instead of return action, dispatch(actions);\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    console.log(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","api","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","message","createPost","post","updatePost","id","likePost","deletePost"],"sources":["C:/MERN app/client/src/actions/posts.js"],"sourcesContent":["import {FETCH_ALL, CREATE, UPDATE, DELETE, LIKE} from '../constants/actionTypes';\r\nimport * as api from '../api';\r\n\r\n// Action Creators - function that return an action. \r\n// Action is just a type and payload\r\n// with redux thunk, allows to add async(dispatch). Instead of return action, dispatch(actions);\r\nexport const getPosts = () => async(dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchPosts();\r\n\r\n        dispatch( { type: FETCH_ALL, payload: data });\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.createPost(post);\r\n        console.log(post)\r\n        dispatch({type: CREATE, payload: data});\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updatePost = (id, post) => async (dispatch) =>{\r\n    try {\r\n        const {data} = await api.updatePost(id, post);\r\n\r\n        dispatch({type: UPDATE, payload: data})\r\n    } catch (error) {\r\n        console.log(error.message)\r\n    }\r\n}\r\nexport const likePost = (id) => async(dispatch) =>{\r\n    try {\r\n        const {data} = await api.likePost(id);\r\n\r\n        dispatch({type: LIKE, payload: data})\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const deletePost = (id) => async(dispatch) =>{\r\n    try {\r\n        await api.deletePost(id)\r\n\r\n        dispatch({type: DELETE, payload: id});\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,IAA3C,QAAsD,0BAAtD;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAmB;EAC7C,IAAI;IACA,MAAM;MAAEC;IAAF,IAAW,MAAMH,GAAG,CAACI,UAAJ,EAAvB;IAEAF,QAAQ,CAAE;MAAEG,IAAI,EAAEV,SAAR;MAAmBW,OAAO,EAAEH;IAA5B,CAAF,CAAR;EACH,CAJD,CAIE,OAAOI,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACH;AAIJ,CAXM;AAaP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU,MAAOV,QAAP,IAAoB;EACpD,IAAI;IACA,MAAM;MAACC;IAAD,IAAS,MAAMH,GAAG,CAACW,UAAJ,CAAeC,IAAf,CAArB;IACAJ,OAAO,CAACC,GAAR,CAAYG,IAAZ;IACAV,QAAQ,CAAC;MAACG,IAAI,EAAET,MAAP;MAAeU,OAAO,EAAEH;IAAxB,CAAD,CAAR;EACH,CAJD,CAIE,OAAOI,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;AACJ,CARM;AAUP,OAAO,MAAMM,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOV,QAAP,IAAmB;EACvD,IAAI;IACA,MAAM;MAACC;IAAD,IAAS,MAAMH,GAAG,CAACa,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAArB;IAEAV,QAAQ,CAAC;MAACG,IAAI,EAAER,MAAP;MAAeS,OAAO,EAAEH;IAAxB,CAAD,CAAR;EACH,CAJD,CAIE,OAAOI,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACH;AACJ,CARM;AASP,OAAO,MAAMK,QAAQ,GAAID,EAAD,IAAQ,MAAMZ,QAAN,IAAkB;EAC9C,IAAI;IACA,MAAM;MAACC;IAAD,IAAS,MAAMH,GAAG,CAACe,QAAJ,CAAaD,EAAb,CAArB;IAEAZ,QAAQ,CAAC;MAACG,IAAI,EAAEN,IAAP;MAAaO,OAAO,EAAEH;IAAtB,CAAD,CAAR;EACH,CAJD,CAIE,OAAOI,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;AACJ,CARM;AAUP,OAAO,MAAMS,UAAU,GAAIF,EAAD,IAAQ,MAAMZ,QAAN,IAAkB;EAChD,IAAI;IACA,MAAMF,GAAG,CAACgB,UAAJ,CAAeF,EAAf,CAAN;IAEAZ,QAAQ,CAAC;MAACG,IAAI,EAAEP,MAAP;MAAeQ,OAAO,EAAEQ;IAAxB,CAAD,CAAR;EACH,CAJD,CAIE,OAAOP,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;AACJ,CARM"},"metadata":{},"sourceType":"module"}